#ifndef MATH_H
#define MATH_H
#include "types.h"

void  quat_set(quat* dst, quat q);
void  quat_setf(quat* dst, float x, float y, float z, float w);
void  quat_set2v(quat* dst, v2 v);
void  quat_set3v(quat* dst, v3 v);
void  quat_set4v(quat* dst, v4 v);
float quat_getv(quat q, int index);
void  v2_zero(v2* dst);
void  v2_add(v2* dst, v2 a, v2 b);
void  v2_sub(v2* dst, v2 a, v2 b);
void  v2_mul(v2* dst, v2 a, v2 b);
void  v2_scale(v2* dst, v2 a, float s);
void  v2_div(v2* dst, v2 a, v2 b);
float v2_mul_inner(v2 a, v2 b);
float v2_len(v2 a);
void  v2_norm(v2* dst, v2 v);
float v2_dist(v2 a, v2 b);
void  v2_set(v2* dst, v2 src);
void  v2_setfv(v2* dst, float v[], int len);
void  v2_setf(v2* dst, float x, float y);
void  v2_set_array(v2* dst[], float v[], int len, int* set);
void  v2_set3v(v2* dst, v3 v);
void  v2_set4v(v2* dst, v4 v);
void  v2_reflect(v2* dst, v2 v, v2 n);
void  v3_zero(v3* vec);
void  v3_add(v3* dst, v3 a, v3 b);
void  v3_sub(v3* dst, v3 a, v3 b);
void  v3_mul(v3* dst, v3 a, v3 b);
void  v3_scale(v3* dst, v3 a, float s);
void  v3_div(v3* dst, v3 a, v3 b);
float v3_mul_inner(v3 a, v3 b);
float v3_len(v3 a);
void  v3_norm(v3* dst, v3 v);
float v3_dist(v3 a, v3 b);
void  v3_set(v3* dst, v3 src);
void  v3_setf(v3* dst, float x, float y, float z);
void  v3_setfv(v3* dst, float v[], int len);
void  v3_set_array(v3* dst[], float v[], int len, int* set);
void  v3_setv(v3* dst, float val, int index);
void  v3_setq(v3* dst, quat q);
void  v3_set2v(v3* dst, v2 v);
void  v3_set4v(v3* dst, v4 v);
float v3_getv(v3 src, int index);
void  v3_mul_cross(v3* dst, v3 a, v3 b);
void  v3_reflect(v3* dst, v3 v, v3 n);
v3  v3_rot_x(v3 v, double a);
v3  v3_rot_y(v3 v, double a);
v3  v3_rot_z(v3 v, double a);
v3  v3_move_dir(v3 p, v3 rot, v3 amt);
void  v4_zero(v4* dst);
void  v4_add(v4* dst, v4 a, v4 b);
void  v4_sub(v4* dst, v4 a, v4 b);
void  v4_mul(v4* dst, v4 a, v4 b);
void  v4_scale(v4* dst, v4 a, float s);
void  v4_div(v4* dst, v4 a, v4 b);
float v4_mul_inner(v4 a, v4 b);
float v4_len(v4 a);
void  v4_norm(v4* dst, v4 v);
void  v4_set(v4* dst, v4 src);
void  v4_setf(v4* dst, float x, float y, float z, float w);
void  v4_setfv(v4* dst, float v[], int len);
void  v4_set_array(v4* dst[], float v[], int len, int* set);
void  v4_set3v(v4* dst, v3 v);
void  v4_set2v(v4* dst, v2 v);
void  v4_setv(v4* dst, float v, int index);
float v4_dist(v4 a, v4 b);
float v4_getv(v4 src, int index);
void  v4_reflect(v4* dst, v4 v, v4 n);
void  v4_mul_cross(v4* dst, v4 a, v4 b);
void m4_identity(m4* dst);
void m4_set(m4* dst, m4 src);
void m4_row(v4* r, m4 m, int i);
void m4_column(v4* r, m4 m, int i);
void m4_transpose(m4* dst, m4 src);
void m4_add(m4* dst, m4 a, m4 b);
void m4_sub(m4* dst, m4 a, m4 b);
void m4_scale(m4* dst, m4 a, float s);
void m4_scale_ansio(m4* dst, m4 a, float x, float y, float z);
void m4_mul(m4* dst, m4 left, m4 right);
void m4_size_scale(m4* dst, m4 a, float x, float y, float z);
void m4_mul_v4(v4* dst, m4 m, v4 vec);
void m4_translate(m4* dst, float x, float y, float z);
void m4_translatev3(m4* dst, v3 v);
void m4_translate_in_place(m4* dst, float x, float y, float z);
void m4_from_v3_mul_outer(m4* dst, v3 a, v3 b);
void m4_rotate(m4* dst, m4 m, float x, float y, float z, float angle);
void m4_rotate_x(m4* dst, float angle);
void m4_rotate_y(m4* dst, float angle);
void m4_rotate_z(m4* dst, float angle);
void m4_ortho(m4* dst, float l, float r, float b, float t, float n, float f);
void m4_perspective(m4* dst, float fov, float asp, float n, float f);
void m4_look_at(m4* dst, v3 eye, v3 center, v3 up);
void  quat_set(quat* dst, quat q);
void  quat_setf(quat* dst, float x, float y, float z, float w);
void  quat_set2v(quat* dst, v2 v);
void  quat_set3v(quat* dst, v3 v);
void  quat_set4v(quat* dst, v4 v);
float quat_getv(quat q, int index);
void  quat_setv(quat* dst, float v, int index);
void  quat_identity(quat q);
void  quat_add(quat* dst, quat a, quat b);
void  quat_sub(quat* dst, quat a, quat b);
void  quat_mul(quat* dst, quat p, quat q);
void  quat_scale(quat* dst, quat v, float s);
float quat_inner_product(quat a, quat b);
void  quat_conj(quat* dst, quat q);
void  quat_rotate(quat* dst, float angle, v3 axis);
void  quat_mul_v3(v3* dst, quat q, v3 v);
void  m4_from_quat(m4* dst, quat q);
float flerpf(float a, float b, float t);
float  truncateDeg(float deg);
double deg2rad(float deg);
double cosDeg(float deg);
double sinDeg(float deg);

#endif
