#ifndef MATH_H
#define MATH_H
#include "types.h"

void  quat_set(quat* dst, quat q);
void  quat_setf(quat* dst, float x, float y, float z, float w);
void  quat_set2v(quat* dst, vec2 v);
void  quat_set3v(quat* dst, vec3 v);
void  quat_set4v(quat* dst, vec4 v);
float quat_getv(quat q, int index);
void  vec2_zero(vec2* dst);
void  vec2_add(vec2* dst, vec2 a, vec2 b);
void  vec2_sub(vec2* dst, vec2 a, vec2 b);
void  vec2_mul(vec2* dst, vec2 a, vec2 b);
void  vec2_scale(vec2* dst, vec2 a, float s);
void  vec2_div(vec2* dst, vec2 a, vec2 b);
float vec2_mul_inner(vec2 a, vec2 b);
float vec2_len(vec2 a);
void  vec2_norm(vec2* dst, vec2 v);
float vec2_dist(vec2 a, vec2 b);
void  vec2_set(vec2* dst, vec2 src);
void  vec2_setfv(vec2* dst, float v[], int len);
void  vec2_setf(vec2* dst, float x, float y);
void  vec2_set_array(vec2* dst[], float v[], int len, int* set);
void  vec2_set3v(vec2* dst, vec3 v);
void  vec2_set4v(vec2* dst, vec4 v);
void  vec2_reflect(vec2* dst, vec2 v, vec2 n);
void  vec3_zero(vec3* vec);
void  vec3_add(vec3* dst, vec3 a, vec3 b);
void  vec3_sub(vec3* dst, vec3 a, vec3 b);
void  vec3_mul(vec3* dst, vec3 a, vec3 b);
void  vec3_scale(vec3* dst, vec3 a, float s);
void  vec3_div(vec3* dst, vec3 a, vec3 b);
float vec3_mul_inner(vec3 a, vec3 b);
float vec3_len(vec3 a);
void  vec3_norm(vec3* dst, vec3 v);
float vec3_dist(vec3 a, vec3 b);
void  vec3_set(vec3* dst, vec3 src);
void  vec3_setf(vec3* dst, float x, float y, float z);
void  vec3_setfv(vec3* dst, float v[], int len);
void  vec3_set_array(vec3* dst[], float v[], int len, int* set);
void  vec3_setv(vec3* dst, float val, int index);
void  vec3_setq(vec3* dst, quat q);
void  vec3_set2v(vec3* dst, vec2 v);
void  vec3_set4v(vec3* dst, vec4 v);
float vec3_getv(vec3 src, int index);
void  vec3_mul_cross(vec3* dst, vec3 a, vec3 b);
void  vec3_reflect(vec3* dst, vec3 v, vec3 n);
vec3  vec3_rot_x(vec3 v, double a);
vec3  vec3_rot_y(vec3 v, double a);
vec3  vec3_rot_z(vec3 v, double a);
vec3  vec3_move_dir(vec3 p, vec3 rot, vec3 amt);
void  vec4_zero(vec4* dst);
void  vec4_add(vec4* dst, vec4 a, vec4 b);
void  vec4_sub(vec4* dst, vec4 a, vec4 b);
void  vec4_mul(vec4* dst, vec4 a, vec4 b);
void  vec4_scale(vec4* dst, vec4 a, float s);
void  vec4_div(vec4* dst, vec4 a, vec4 b);
float vec4_mul_inner(vec4 a, vec4 b);
float vec4_len(vec4 a);
void  vec4_norm(vec4* dst, vec4 v);
void  vec4_set(vec4* dst, vec4 src);
void  vec4_setf(vec4* dst, float x, float y, float z, float w);
void  vec4_setfv(vec4* dst, float v[], int len);
void  vec4_set_array(vec4* dst[], float v[], int len, int* set);
void  vec4_set3v(vec4* dst, vec3 v);
void  vec4_set2v(vec4* dst, vec2 v);
void  vec4_setv(vec4* dst, float v, int index);
float vec4_dist(vec4 a, vec4 b);
float vec4_getv(vec4 src, int index);
void  vec4_reflect(vec4* dst, vec4 v, vec4 n);
void  vec4_mul_cross(vec4* dst, vec4 a, vec4 b);
void mat4_identity(mat4* dst);
void mat4_set(mat4* dst, mat4 src);
void mat4_row(vec4* r, mat4 m, int i);
void mat4_column(vec4* r, mat4 m, int i);
void mat4_transpose(mat4* dst, mat4 src);
void mat4_add(mat4* dst, mat4 a, mat4 b);
void mat4_sub(mat4* dst, mat4 a, mat4 b);
void mat4_scale(mat4* dst, mat4 a, float s);
void mat4_scale_ansio(mat4* dst, mat4 a, float x, float y, float z);
void mat4_mul(mat4* dst, mat4 left, mat4 right);
void mat4_size_scale(mat4* dst, mat4 a, float x, float y, float z);
void mat4_mul_vec4(vec4* dst, mat4 m, vec4 vec);
void mat4_translate(mat4* dst, float x, float y, float z);
void mat4_translate_in_place(mat4* dst, float x, float y, float z);
void mat4_from_vec3_mul_outer(mat4* dst, vec3 a, vec3 b);
void mat4_rotate(mat4* dst, mat4 m, float x, float y, float z, float angle);
void mat4_rotate_x(mat4* dst, float angle);
void mat4_rotate_y(mat4* dst, float angle);
void mat4_rotate_z(mat4* dst, float angle);
void mat4_ortho(mat4* dst, float l, float r, float b, float t, float n, float f);
void mat4_perspective(mat4* dst, float fov, float asp, float n, float f);
void mat4_look_at(mat4* dst, vec3 eye, vec3 center, vec3 up);
void  quat_set(quat* dst, quat q);
void  quat_setf(quat* dst, float x, float y, float z, float w);
void  quat_set2v(quat* dst, vec2 v);
void  quat_set3v(quat* dst, vec3 v);
void  quat_set4v(quat* dst, vec4 v);
float quat_getv(quat q, int index);
void  quat_setv(quat* dst, float v, int index);
void  quat_identity(quat q);
void  quat_add(quat* dst, quat a, quat b);
void  quat_sub(quat* dst, quat a, quat b);
void  quat_mul(quat* dst, quat p, quat q);
void  quat_scale(quat* dst, quat v, float s);
float quat_inner_product(quat a, quat b);
void  quat_conj(quat* dst, quat q);
void  quat_rotate(quat* dst, float angle, vec3 axis);
void  quat_mul_vec3(vec3* dst, quat q, vec3 v);
void  mat4_from_quat(mat4* dst, quat q);
float flerpf(float a, float b, float t);
float  truncateDeg(float deg);
double deg2rad(float deg);
double cosDeg(float deg);
double sinDeg(float deg);

#endif
